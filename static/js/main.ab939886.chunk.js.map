{"version":3,"sources":["components/Meme.js","App.js","index.js"],"names":["Meme","template","onClick","style","width","src","url","alt","name","id","App","useState","templates","setTemplates","setTemplate","topText","setTopText","bottomText","setBottomText","meme","setMeme","useEffect","fetch","then","x","json","response","data","memes","textAlign","onSubmit","e","a","preventDefault","params","template_id","text0","text1","username","password","obj","Object","entries","map","key","value","join","placeholder","onChange","target","type","rootElement","document","getElementById","ReactDOM","render"],"mappings":"8LAEaA,EAAO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/B,OACE,qBACEC,MAAO,CAAEC,MAAO,KAEhBC,IAAKJ,EAASK,IACdC,IAAKN,EAASO,KACdN,QAASA,GAHJD,EAASQ,KC+ELC,MA7Ef,WACE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgCF,mBAAS,MAAzC,mBAAOV,EAAP,KAAiBa,EAAjB,KACA,EAA8BH,mBAAS,IAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAoCL,mBAAS,IAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KACA,EAAwBP,mBAAS,MAAjC,mBAAOQ,EAAP,KAAaC,EAAb,KAQA,OANAC,qBAAU,WACRC,MAAM,qCAAqCC,MAAK,SAACC,GAAD,OAC9CA,EAAEC,OAAOF,MAAK,SAACG,GAAD,OAAcb,EAAaa,EAASC,KAAKC,eAExD,IAECT,EAEA,qBAAKhB,MAAO,CAAE0B,UAAW,UAAzB,SACE,qBAAK1B,MAAO,CAAEC,MAAO,KAAOC,IAAKc,EAAMZ,IAAI,kBAM/C,sBAAKJ,MAAO,CAAE0B,UAAW,UAAzB,UACG5B,GACC,uBACE6B,SAAQ,uCAAE,WAAOC,GAAP,mBAAAC,EAAA,6DACRD,EAAEE,iBAEIC,EAAS,CACbC,YAAalC,EAASQ,GACtB2B,MAAOrB,EACPsB,MAAOpB,EACPqB,SAAU,WACVC,SAAU,sBARJ,SAUejB,MAAM,wCAAD,QAxCZkB,EA0CZN,EAxCP,IADQO,OAAOC,QAAQF,GAAKG,KAAI,mCAAEC,EAAF,KAAOC,EAAP,qBAAqBD,EAArB,YAA4BC,MAC/CC,KAAK,QA4BP,cAUFpB,EAVE,gBAeWA,EAASD,OAfpB,OAeFA,EAfE,OAgBRL,EAAQK,EAAKE,KAAKrB,KAhBV,iCA9BO,IAACkC,IA8BR,OAAF,sDADV,UAoBE,cAAC,EAAD,CAAMvC,SAAUA,IAChB,uBACE8C,YAAY,WACZF,MAAO9B,EACPiC,SAAU,SAACjB,GAAD,OAAOf,EAAWe,EAAEkB,OAAOJ,UAEvC,uBACEE,YAAY,cACZF,MAAO5B,EACP+B,SAAU,SAACjB,GAAD,OAAOb,EAAca,EAAEkB,OAAOJ,UAE1C,wBAAQK,KAAK,SAAb,6BAGFjD,GACA,qCACE,iDACCW,EAAU+B,KAAI,SAAC1C,GACd,OACE,cAAC,EAAD,CACEA,SAAUA,EACVC,QAAS,WACPY,EAAYb,gBCrExBkD,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFJ,K","file":"static/js/main.ab939886.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Meme = ({ template, onClick }) => {\r\n  return (\r\n    <img\r\n      style={{ width: 200 }}\r\n      key={template.id}\r\n      src={template.url}\r\n      alt={template.name}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport { Meme } from \"./components/Meme\";\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((x) =>\n      x.json().then((response) => setTemplates(response.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <img style={{ width: 200 }} src={meme} alt=\"custom meme\" />\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {template && (\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            // add logic to create meme from api\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: \"xzk03017\",\n              password: \"xzk03017@cndps.com\"\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const json = await response.json();\n            setMeme(json.data.url);\n          }}\n        >\n          <Meme template={template} />\n          <input\n            placeholder=\"top text\"\n            value={topText}\n            onChange={(e) => setTopText(e.target.value)}\n          />\n          <input\n            placeholder=\"bottom text\"\n            value={bottomText}\n            onChange={(e) => setBottomText(e.target.value)}\n          />\n          <button type=\"submit\">create meme</button>\n        </form>\n      )}\n      {!template && (\n        <>\n          <h1>Pick a template</h1>\n          {templates.map((template) => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}